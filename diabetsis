{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled16.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN32YThG4nyMxX9QoXjAhSl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/npourshahrokhi/mask--rcnn/blob/main/diabetsis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "54N5udiaQNVW",
        "outputId": "ccddf4c1-94f8-4e78-919a-760467939d94"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n",
            "       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],\n",
            "      dtype='object')\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "diabetes = pd.read_csv('diabetes.csv')\n",
        "print(diabetes.columns)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "diabetes.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gAvnm3vJQiqd",
        "outputId": "e75a03d0-87fc-4043-f74a-40e53c5712a4"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "1            1       85             66             29        0  26.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "3            1       89             66             23       94  28.1   \n",
              "4            0      137             40             35      168  43.1   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "1                     0.351   31        0  \n",
              "2                     0.672   32        1  \n",
              "3                     0.167   21        0  \n",
              "4                     2.288   33        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4b5f9ec0-dced-470a-abdd-bb8746d38e54\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b5f9ec0-dced-470a-abdd-bb8746d38e54')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4b5f9ec0-dced-470a-abdd-bb8746d38e54 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4b5f9ec0-dced-470a-abdd-bb8746d38e54');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"dimension of diabetes data: {}\".format(diabetes.shape))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-PkT7v_tQpTs",
        "outputId": "78ca05d5-3639-4ef6-af73-669ebbc286e5"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dimension of diabetes data: (865, 9)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(diabetes.groupby('Outcome').size())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mHYtIZV9Qupb",
        "outputId": "67e61915-e960-411d-f7f1-1e3fcbaa8527"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Outcome\n",
            "0    563\n",
            "1    302\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "sns.countplot(diabetes['Outcome'],label=\"Count\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "k0LEjQFEQ9o1",
        "outputId": "1ff2af27-4feb-41c0-b2a3-0c0f778b9742"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fce4a5eff90>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "diabetes.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7l8Q_oJ_RCbM",
        "outputId": "35825cd4-7915-4599-ec00-93c6d148f869"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 865 entries, 0 to 864\n",
            "Data columns (total 9 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Pregnancies               865 non-null    int64  \n",
            " 1   Glucose                   865 non-null    int64  \n",
            " 2   BloodPressure             865 non-null    int64  \n",
            " 3   SkinThickness             865 non-null    int64  \n",
            " 4   Insulin                   865 non-null    int64  \n",
            " 5   BMI                       865 non-null    float64\n",
            " 6   DiabetesPedigreeFunction  865 non-null    float64\n",
            " 7   Age                       865 non-null    int64  \n",
            " 8   Outcome                   865 non-null    int64  \n",
            "dtypes: float64(2), int64(7)\n",
            "memory usage: 60.9 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(diabetes.loc[:, diabetes.columns != 'Outcome'], diabetes['Outcome'], stratify=diabetes['Outcome'], random_state=66)\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "training_accuracy = []\n",
        "test_accuracy = []\n",
        "# try n_neighbors from 1 to 10\n",
        "neighbors_settings = range(1, 11)\n",
        "for n_neighbors in neighbors_settings:\n",
        "    # build the model\n",
        "    knn = KNeighborsClassifier(n_neighbors=n_neighbors)\n",
        "    knn.fit(X_train, y_train)\n",
        "    # record training set accuracy\n",
        "    training_accuracy.append(knn.score(X_train, y_train))\n",
        "    # record test set accuracy\n",
        "    test_accuracy.append(knn.score(X_test, y_test))\n",
        "plt.plot(neighbors_settings, training_accuracy, label=\"training accuracy\")\n",
        "plt.plot(neighbors_settings, test_accuracy, label=\"test accuracy\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.xlabel(\"n_neighbors\")\n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "NqKzaVPfRNsE",
        "outputId": "cd426386-46d8-4a97-b390-e310935e6587"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fce4917f2d0>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=9)\n",
        "knn.fit(X_train, y_train)\n",
        "print('Accuracy of K-NN classifier on training set: {:.2f}'.format(knn.score(X_train, y_train)))\n",
        "print('Accuracy of K-NN classifier on test set: {:.2f}'.format(knn.score(X_test, y_test)))"
      ],
      "metadata": {
        "id": "NgRB_yG_SH7f",
        "outputId": "be46127b-120c-4c62-e8d5-9cad20612c43",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of K-NN classifier on training set: 0.80\n",
            "Accuracy of K-NN classifier on test set: 0.68\n"
          ]
        }
      ]
    }
  ]
}